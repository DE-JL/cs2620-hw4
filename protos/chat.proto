syntax = "proto3";

package chat;

service Chat {
    // Called by the new leader to announce itself as coordinator
    rpc Coordinator(CoordinatorRequest) returns (Ack);

    // Called when a server starts an election
    rpc Election(ElectionRequest) returns (Ack);

    // Executes a query
    rpc Execute(ExecuteRequest) returns (ExecuteRequest);

    // Gets all commits after a specified commit ID
    rpc GetCommits(GetCommitsRequest) returns (GetCommitsResponse);

    // Gets the ID of the server that this server thinks is the leader
    rpc GetLeader(GetLeaderRequest) returns (GetLeaderResponse);

    // Called periodically to check if a server is alive
    rpc Heartbeat(HeartbeatRequest) returns (Ack);
}

message Ack {}

message Commit {
    int32 id = 1;       // ID of the commit
    string query = 2;   // The query (JSON-string)
}

message CoordinatorRequest {
    int32 leader_id = 1;                    // ID of the new leader
    repeated Commit commit_history = 2;     // The commit history of the new leader
}

message ElectionRequest {
    int32 candidate_id = 1;     // ID of the server that wants to be leader
}

message ExecuteRequest {
    int32 leader_id = 1;    // ID of the leader forwarding the request
    string query = 2;       // The JSON-string of the query
}

message GetCommitsRequest {
    int32 server_id = 1;            // ID of the requester
    int32 latest_commit_id = 2;     // Fetch all commits occurring after this one
}

message GetCommitsResponse {
    repeated Commit commits = 2;    // The commits requested
}

message GetLeaderRequest {
    int32 server_id = 1;    // ID of the server to query
}

message GetLeaderResponse {
    int32 leader_id = 1;    // ID of who the server thinks is the leader
}

message HeartbeatRequest {
    int32 server_id = 1;    // ID of the server sending the heartbeat
}

